name: Build and Deploy Container App

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches:
      - main        # Automatic trigger on push to main

permissions:
  id-token: write
  contents: read

jobs:
  build-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Log into Azure Container Registry
      run: |
        az acr login --name $(echo ${{ secrets.ACR_LOGIN_SERVER }} | cut -d'.' -f1)

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Verify Secrets (safely)
      run: |
        echo "Checking if secrets are set (without exposing values)..."
        [ -n "${{ secrets.ACR_LOGIN_SERVER }}" ] && echo "ACR_LOGIN_SERVER is set" || echo "ACR_LOGIN_SERVER is NOT set"
        [ -n "${{ secrets.CONTAINER_APP_NAME }}" ] && echo "CONTAINER_APP_NAME is set" || echo "CONTAINER_APP_NAME is NOT set"
        [ -n "${{ secrets.RESOURCE_GROUP_NAME }}" ] && echo "RESOURCE_GROUP_NAME is set" || echo "RESOURCE_GROUP_NAME is NOT set"
        
        # Print the structure of the image name (with * for secret parts)
        echo "Image name structure will be: ***ACR_LOGIN_SERVER***/***CONTAINER_APP_NAME***:TAG"

    - name: Build and push Docker image
      run: |
        # Store the values in environment variables first
        ACR_SERVER="${{ secrets.ACR_LOGIN_SERVER }}"
        CONTAINER_APP="${{ secrets.CONTAINER_APP_NAME }}"
        
        # Verify the variables are set
        if [ -z "$ACR_SERVER" ] || [ -z "$CONTAINER_APP" ]; then
          echo "Error: Required secrets are not set"
          exit 1
        fi
        
        # Create image tag
        IMAGE_TAG=$(date +%Y%m%d)-${GITHUB_RUN_NUMBER}
        echo "Building image with tag: $IMAGE_TAG"
        echo "Full image name: $ACR_SERVER/$CONTAINER_APP:${IMAGE_TAG}"
        
        docker build -t $ACR_SERVER/$CONTAINER_APP:${IMAGE_TAG} .
        docker push $ACR_SERVER/$CONTAINER_APP:${IMAGE_TAG}
        
        # Set output for use in next step
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
        echo "FULL_IMAGE_NAME=$ACR_SERVER/$CONTAINER_APP:${IMAGE_TAG}" >> $GITHUB_ENV

    - name: Deploy to Container App
      uses: azure/container-apps-deploy-action@v2
      env:
        ACR_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
        CONTAINER_APP: ${{ secrets.CONTAINER_APP_NAME }}
      with:
        imageToDeploy: ${{ env.FULL_IMAGE_NAME }}
        resourceGroup: ${{ secrets.RESOURCE_GROUP_NAME }}
        containerAppName: ${{ secrets.CONTAINER_APP_NAME }}
        targetPort: 80
